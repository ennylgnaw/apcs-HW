/***
 * class Matrix -- models a square matrix
 *
 * BACKGROUND:
 * A matrix is a rectangular array.
 * Its dimensions are numRows x numColumns.
 * Each element is indexed as (row,column): 
 *  eg,
 *   for 2 x 3 matrix M:
 *        -       -
 *   M =  | a b c |
 *        | d e f |
 *        -       -
 *   ... d is at position (2,1) or M[2,1] 
 *
 * TASK:
 * Implement methods below, categorize runtime of each. 
 * Test in main method.
 ***/


public class Matrix 
{
    //constant for default matrix size
    private final static int DEFAULT_SIZE = 2;

    private Object[][] matrix;

    //default constructor intializes a DEFAULT_SIZE*DEFAULT_SIZE matrix
    public Matrix()
    {
	matrix = new Object[][];
    }


    //constructor intializes an a*a matrix
    public Matrix( int a ) 
    {
	matrix = new Object[a][a];
    }


    //return size of this matrix, where size is 1 dimension
    private int size()
    {
	int size = 0;
	for(Object item : matrix)
	    size += 1;
	return size;
    }


    //return the item at the specified row & column   
    private Object get( int r, int c )
    {
	return matrix[r][c];
    }


    //return true if this matrix is empty, false otherwise
    private boolean isEmpty( int r, int c ) 
    {
        return matrix.size() > 0;
    }


    //overwrite item at specified row and column with newVal
    //return old value
    private Object set( int r, int c, Object newVal ) 
    {
	Object old = matrix.get(r, c);
	matrix[r][c] = newVal;
	return old;
    }


    //return String representation of this matrix
    // (make it look like a matrix)
    public String toString() 
    {
	String str = "";
	str += "[";
	for(Object[] row : matrix) {
	    for(Object item : row)
		str = item + ", ";
	    str += "\n";
	}
	str += "]";
	return str;
    }


    //override inherited equals method
    //criteria for equality: matrices have identical dimensions,
    // and identical values in each slot
    public boolean equals( Matrix rightSide ) 
    {
	if (matrix.size() != rightSide.size())
	    return false;
        for(int i = 0; i < matrix.length; i++)
	    for (int x = 0; x < matrix[0].length; x++)
		if (! (matrix.get(i, x)).equals(rightSide.get(i, x)) )
		    return false;
	return true;
    }


    //swap two columns of this matrix 
    //(1,1) is top left corner of matrix
    //row values increase going down
    //column value increase L-to-R
    public void swapColumns( int c1, int c2  ) 
    {/*
	for(int i = 0; i < matrix.length; i++) {
	    Object oldc1 = matrix.get();
	    matrix.set( 
	}
	}*/


    //swap two rows of this matrix 
    //(1,1) is top left corner of matrix
    //row values increase going down
    //column value increase L-to-R
    public void swapRows( int r1, int r2  ) 
    {
    }


    //main method for testing
    public static void main( String[] args ) 
    {
	System.out.println(
    }

}//end class Matrix
